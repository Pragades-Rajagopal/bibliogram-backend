export default {
  databaseErrors: {
    uniqueConstraint: "UNIQUE constraint failed",
    uniqueConstraintCode: 23505,
    constraint: "SQLITE_CONSTRAINT",
  },
  statusCode: {
    success: 200,
    error: 400,
    unauthorized: 401,
    forbidden: 403,
    notFound: 404,
    serverError: 500,
  },
  debugErrorCodes: {
    userComponent: {
      saveUser: "EU000",
      getUser: "EU001",
      saveLogin: "EU002",
      updateLogout: "EU003",
      deactivate: "EU004",
    },
    bookComponent: {
      bulkAdd: "EB000",
      getBooks: "EB001",
      getBookById: "EB002",
      getTopBooks: "EB003",
      bulkDelete: "EB004",
    },
    gramComponent: {
      upsert: "EN000",
      get: "EN001",
      updateVisibility: "EN002",
      delete: "EN003",
    },
    bookmarkGramComponent: {
      save: "ES000",
      get: "ES001",
      remove: "ES002",
      check: "ES003",
    },
    commentComponent: {
      upsert: "EC000",
      get: "EC001",
      delete: "EC002",
    },
    appStats: {
      upsert: "EA000",
      get: "EA001",
    },
    userStats: {
      upsert: "ES000",
    },
  },
  user: {
    registered: "User registered successfully",
    notRegistered: "User not registered",
    invalidAuth: "Private key is not correct",
    logoutSuccess: "User logged out successfully",
    loginNotFound: "User have not logged in yet",
    deactivationSuccess: "User successfully deactivated",
    deactivationError: "Error while deactivating user",
  },
  authenticationMessage: {
    tokenMissing: "Please send auth token in request headers",
    userIdMissing: "Please send 'userId' in request headers",
    invalidToken: "Invalid token! Cannot authenticate at this moment",
    unauthorized: "You are not authorized to perform this action",
  },
  commonServerError: {
    internal: "Internal Server Error",
    badRequest: "Bad request",
    forbidden: "You do not have access to this operation",
  },
  loginService: {
    hash: {
      success: "Private key hashed",
      error: "Error while hashing the private key",
    },
    verification: {
      success: "User verified",
      error: "Error while verifying the private key",
    },
  },
  books: {
    addSuccess: "Book(s) added successfully",
    addFailure: "Error while adding book(s)",
    found: "Book detail found",
    notFound: "Book detail not found for the given id or query",
    getError: "Error while getting book detail",
    getTopBooksError: "Error while getting top books detail",
    deleteSuccess: "Book(s) deleted successfully",
    deleteError: "Error while deleting books",
  },
  gram: {
    upsertSuccess: "gram added/updated successfully",
    upsertFailure: "Error while adding/updating gram",
    upsertBadRequest: "Request data is incorrect to update gram",
    found: "gram found",
    notFound: "gram(s) not found for the given id or query",
    getError: "Error while retrieving grams",
    deleteSuccess: "gram deleted successfully",
    deleteFailure: "Error while deleting gram",
    publicFlag: "public",
    privateFlag: "private",
    updateFlagSuccess: "Visibility updated successfully",
    updateFlagFailure: "Visibility update failure",
    badRequest: "Flag should be either 'public' or 'private'",
  },
  comment: {
    upsertComment: "Comment added/updated successfully",
    upsertFailure: "Error while adding/updating comment",
    upsertBadRequest: "Request data is incorrect to update comment",
    found: "Comment found",
    notFound: "Comment(s) not found for the given id or query",
    getError: "Error while retrieving comment",
    updateSuccess: "Comment updated successfully",
    deleteSuccess: "Comment deleted successfully",
    deleteFailure: "Error while deleting comment",
  },
  search: {
    error: "Error while searching",
    success: "Search successful",
    notData: "No result for the given value",
  },
  bookmark: {
    addSuccess: "gram bookmarked for later",
    addFailure: "Error while bookmarking gram for later",
    found: "Bookmarks found",
    notFound: "No bookmarks found",
    getError: "Error while getting bookmarks",
    deleteSuccess: "Bookmark removed successfully",
    deleteError: "Error while removing bookmark",
    exists: "Bookmark already exists",
  },
  assetValidation: {
    gramNotExists: "gram not found to perform this operation",
    bookNotExists: "Book not found to perform this operation",
    commentNotExists: "Comment not found to perform this operation",
    userNotExists: "User not found to perform this operation",
  },
  appStats: {
    found: "App stats found",
    notFound: "App stats not found",
    getError: "Error while getting app stats",
  },
};
